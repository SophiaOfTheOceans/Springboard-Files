{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Inferential Statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After cleaning and getting a general idea of the data, I'm going to do some hypothesis testing on the categorical variables and some regression analysis to see which, if any, of the numerical variables contribute significantly to the predicted variable, the weekly revenue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing necessary modules\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>Dept</th>\n",
       "      <th>Date</th>\n",
       "      <th>Weekly_Sales</th>\n",
       "      <th>IsHoliday</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Fuel_Price</th>\n",
       "      <th>MarkDown1</th>\n",
       "      <th>MarkDown2</th>\n",
       "      <th>MarkDown3</th>\n",
       "      <th>MarkDown4</th>\n",
       "      <th>MarkDown5</th>\n",
       "      <th>CPI</th>\n",
       "      <th>Unemployment</th>\n",
       "      <th>Type</th>\n",
       "      <th>Size</th>\n",
       "      <th>IsMarkDown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26</td>\n",
       "      <td>92</td>\n",
       "      <td>2011-08-26</td>\n",
       "      <td>87235.57</td>\n",
       "      <td>False</td>\n",
       "      <td>61.10</td>\n",
       "      <td>3.796</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>136.213613</td>\n",
       "      <td>7.767</td>\n",
       "      <td>A</td>\n",
       "      <td>152513</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>34</td>\n",
       "      <td>22</td>\n",
       "      <td>2011-03-25</td>\n",
       "      <td>5945.97</td>\n",
       "      <td>False</td>\n",
       "      <td>53.11</td>\n",
       "      <td>3.480</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>128.616064</td>\n",
       "      <td>10.398</td>\n",
       "      <td>A</td>\n",
       "      <td>158114</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21</td>\n",
       "      <td>28</td>\n",
       "      <td>2010-12-03</td>\n",
       "      <td>1219.89</td>\n",
       "      <td>False</td>\n",
       "      <td>50.43</td>\n",
       "      <td>2.708</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>211.265543</td>\n",
       "      <td>8.163</td>\n",
       "      <td>B</td>\n",
       "      <td>140167</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>2010-09-17</td>\n",
       "      <td>11972.71</td>\n",
       "      <td>False</td>\n",
       "      <td>75.32</td>\n",
       "      <td>2.582</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>214.878556</td>\n",
       "      <td>6.315</td>\n",
       "      <td>A</td>\n",
       "      <td>155078</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>55</td>\n",
       "      <td>2012-05-18</td>\n",
       "      <td>8271.82</td>\n",
       "      <td>False</td>\n",
       "      <td>58.81</td>\n",
       "      <td>4.029</td>\n",
       "      <td>12613.98</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.5</td>\n",
       "      <td>1705.28</td>\n",
       "      <td>3600.79</td>\n",
       "      <td>138.106581</td>\n",
       "      <td>8.150</td>\n",
       "      <td>A</td>\n",
       "      <td>203819</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  Dept        Date  Weekly_Sales  IsHoliday  Temperature  Fuel_Price  \\\n",
       "0     26    92  2011-08-26      87235.57      False        61.10       3.796   \n",
       "1     34    22  2011-03-25       5945.97      False        53.11       3.480   \n",
       "2     21    28  2010-12-03       1219.89      False        50.43       2.708   \n",
       "3      8     9  2010-09-17      11972.71      False        75.32       2.582   \n",
       "4     19    55  2012-05-18       8271.82      False        58.81       4.029   \n",
       "\n",
       "   MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  \\\n",
       "0       0.00        0.0        0.0       0.00       0.00  136.213613   \n",
       "1       0.00        0.0        0.0       0.00       0.00  128.616064   \n",
       "2       0.00        0.0        0.0       0.00       0.00  211.265543   \n",
       "3       0.00        0.0        0.0       0.00       0.00  214.878556   \n",
       "4   12613.98        0.0       11.5    1705.28    3600.79  138.106581   \n",
       "\n",
       "   Unemployment Type    Size  IsMarkDown  \n",
       "0         7.767    A  152513       False  \n",
       "1        10.398    A  158114       False  \n",
       "2         8.163    B  140167       False  \n",
       "3         6.315    A  155078       False  \n",
       "4         8.150    A  203819       False  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reading in the csv file and looking at the first five rows\n",
    "df = pd.read_csv(r'C:\\Users\\songs\\Desktop\\Springboard Files\\Capstone 2\\data\\Interim\\train1.csv',index_col=0)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 282451 entries, 0 to 282450\n",
      "Data columns (total 17 columns):\n",
      "Store           282451 non-null int64\n",
      "Dept            282451 non-null int64\n",
      "Date            282451 non-null datetime64[ns]\n",
      "Weekly_Sales    282451 non-null float64\n",
      "IsHoliday       282451 non-null bool\n",
      "Temperature     282451 non-null float64\n",
      "Fuel_Price      282451 non-null float64\n",
      "MarkDown1       282451 non-null float64\n",
      "MarkDown2       282451 non-null float64\n",
      "MarkDown3       282451 non-null float64\n",
      "MarkDown4       282451 non-null float64\n",
      "MarkDown5       282451 non-null float64\n",
      "CPI             282451 non-null float64\n",
      "Unemployment    282451 non-null float64\n",
      "Type            282451 non-null category\n",
      "Size            282451 non-null int64\n",
      "IsMarkDown      282451 non-null bool\n",
      "dtypes: bool(2), category(1), datetime64[ns](1), float64(10), int64(3)\n",
      "memory usage: 43.1 MB\n"
     ]
    }
   ],
   "source": [
    "#Reminder of the type of the columns included\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Categorical variables:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the boolean categorical variables (IsHoliday and IsMarkDown), I'm going to perform a frequentist hypothesis test to see if the weekly sales are different between the two categories. For the Type column, which contains 3 options, I'm going to do an ANOVA (Analysis of Variance) test to see if the type of store is relevant for the revenue prediction.\n",
    "\n",
    "There are three requirements that must be met for frequentist hypothesis testing: \n",
    "* First, the samples must be independent. \n",
    "\n",
    "This assumption may be questionable, because the dataset has a time-series element to it and each week's revenue may have an impact on the revenue next week. For our purposes, though, we can assume that that each row is an independent observation based only on the features. If I have time, I can utilize a more Times Series based approach.\n",
    "* Second, the samples must be random. \n",
    "\n",
    "This is an assumption, but since the description of the dataset doesn’t mention any biases in selection we can assume that there is none. \n",
    "* Third, the distribution must be normal. \n",
    "\n",
    "By “distribution” here, we are referring to the distribution of the mean of the data according to the central limit theorem, which means that the sample data should either be 1) normal, or 2) greater than 30. As both the test and training data have more than 30 entries, this condition is satisfied."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Holiday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c937a92eb8>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#The number of entries for each IsHoliday option.\n",
    "sns.countplot(x='IsHoliday', data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As can be seen above, the number of weeks that are not holidays vastly outnumber weeks that are holidays. This may have an impact on our hypothesis testing later, but since both contain more than 30 entires the samples can still be said to be independent. Next, we find the mean and standard deviation for each option and perform a hypothesis test."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Holiday == True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we're going to find the mean and standard deviation of the weekly sales made during holiday weeks. As we're going to be doing this a lot, it might be helpful to write a function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#As we're going to be doing this a lot, it might be helpful to write a function.\n",
    "\n",
    "def find_mean_std_count(condition):\n",
    "    mean = round(df[condition]['Weekly_Sales'].mean(),2)\n",
    "    std = round(df[condition]['Weekly_Sales'].std(),2)\n",
    "    count = df[condition].shape[0]\n",
    "    return mean,std,count\n",
    "\n",
    "holiday_mean, holiday_std, holiday_count = (find_mean_std_count(df['IsHoliday']==True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16986.67"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "holiday_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26955.16"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "holiday_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19819"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "holiday_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The standard deviation is larger than the mean, which is probably due to there being some very large outliers. Next we can compare the value to those of sales made in non-holiday weeks.\n",
    "\n",
    "#### Holiday == False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find the mean, standard deviation, and number of values in non-holiday weeks.\n",
    "no_holiday_mean, no_holiday_std, no_holiday_count = (find_mean_std_count(df['IsHoliday']==False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15907.72"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_holiday_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22301.76"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_holiday_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "262632"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_holiday_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alright, so a similar pattern emerges for sales made in non-holiday weeks. Given the exponential nature of the Weekly sales, this may be a common occurence. Now let's do the hypothesis test. The large intra-group variance, however, brings some doubt to the signficance of the results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hypothesis test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.494943500311113"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H0 = \"The mean weekly revenue for holiday weeks equal to the mean weekly revenue for non-holiday weeks.\"\n",
    "H1 = \"There is a difference between the mean weekly revenue for holiday weeks and non-holiday weeks.\"\n",
    "\n",
    "#Hypothesis testing\n",
    "alpha = 0.05\n",
    "\n",
    "diff = holiday_mean - no_holiday_mean\n",
    "comb_var = holiday_std ** 2 / holiday_count + no_holiday_std ** 2 / no_holiday_count\n",
    "se = np.sqrt(comb_var)\n",
    "\n",
    "t_score = (diff - 0) / se\n",
    "t_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.955858253133158e-08"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Finding the p-value\n",
    "dof = holiday_count + no_holiday_count - 2\n",
    "p = 1 - stats.t.cdf(t_score, df=dof)\n",
    "p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a difference between the mean weekly revenue for holiday weeks and non-holiday weeks.\n"
     ]
    }
   ],
   "source": [
    "if p < 0.05:\n",
    "    print(H1)\n",
    "else:\n",
    "    print(H0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Markdown"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we can look at whether having a markdown influences the sales or not. We're going to follow a similar pattern as shown for the Holiday section, starting with looking at the number of values for each IsMarkDown option, True and False."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c937a98dd8>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='IsMarkDown',data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As seen, there are a lot less weeks with markdowns compared to weeks without. Let's then look at how their mean and standard deviation compares wth each other."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### IsMarkDown == True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find the mean, standard deviation, and count\n",
    "markdown_mean, markdown_std, markdown_count = find_mean_std_count(df['IsMarkDown'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17867.04"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "markdown_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24729.34"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "markdown_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64818"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "markdown_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Holiday == False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find the mean, standard deviation, and count\n",
    "no_markdown_mean, no_markdown_std, no_markdown_count = (find_mean_std_count(df['IsMarkDown']==False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15422.43"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_markdown_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21976.45"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_markdown_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "217633"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_markdown_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hypothesis test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22.6450865177282"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H0 = \"The mean weekly revenue for markdown weeks equal to the mean weekly revenue for non-markdown weeks.\"\n",
    "H1 = \"There is a difference between the mean weekly revenue for markdown weeks and non-markdown weeks.\"\n",
    "\n",
    "#Hypothesis testing\n",
    "alpha = 0.05\n",
    "\n",
    "diff = markdown_mean - no_markdown_mean\n",
    "comb_var = markdown_std ** 2 / markdown_count + no_markdown_std ** 2 / no_markdown_count\n",
    "se = np.sqrt(comb_var)\n",
    "\n",
    "t_score = (diff - 0) / se\n",
    "t_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Finding the p-value\n",
    "dof = markdown_count + no_markdown_count - 2\n",
    "p = 1 - stats.t.cdf(t_score, df=dof)\n",
    "p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a difference between the mean weekly revenue for markdown weeks and non-markdown weeks.\n"
     ]
    }
   ],
   "source": [
    "if p < 0.05:\n",
    "    print(H1)\n",
    "else:\n",
    "    print(H0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Store Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c930bcafd0>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Type',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find mean, standard deviation, and count.\n",
    "type_a_mean, type_a_std, type_a_count = find_mean_std_count(df['Type']=='A')\n",
    "type_b_mean, type_b_std, type_b_count = find_mean_std_count(df['Type']=='B')\n",
    "type_c_mean, type_c_std, type_c_count = find_mean_std_count(df['Type']=='C')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Type A:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20079.17"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_a_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26306.1"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_a_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "144559"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_a_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Type B:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12263.65"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_b_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17273.14"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_b_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "109413"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_b_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Type C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9484.48"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_c_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15926.32"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_c_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28479"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_c_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ANOVA test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ANOVA test\n",
    "total_mean = df['Weekly_Sales'].mean()\n",
    "\n",
    "sst = type_a_count * (type_a_mean - total_mean)**2 + type_b_count * (type_b_mean - total_mean)**2 + type_c_count * (type_c_mean - total_mean)**2\n",
    "    \n",
    "sse = (type_a_count - 1) * type_a_std ** 2 + (type_b_count - 1) * type_b_std ** 2 + (type_c_count - 1) * type_c_std ** 2\n",
    "\n",
    "mst = sst / 2\n",
    "\n",
    "mse = sse / (type_a_count + type_b_count + type_c_count - 3)\n",
    "\n",
    "f_value = mst / mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5190.29535745439"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a difference between at least two different types of stores when it comes to revenue.\n"
     ]
    }
   ],
   "source": [
    "H0 = \"There is no difference between the different types of stores in terms of revenue.\"\n",
    "H1 = \"There is a difference between at least two different types of stores when it comes to revenue.\"\n",
    "\n",
    "if f_value > 3 #The required F-value to be significant:\n",
    "    print(H1)\n",
    "else:\n",
    "    print(H0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Regression analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To look at how the numerical variables impact the revenue, I'm going to plug them all into statsmodel's OLS regression and look at the values given."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#As I am too lazy to put all of the numerical values in by hand I wrote a for loop to take care of that.\n",
    "\n",
    "#Writing statement\n",
    "stmt = 'Weekly_Sales ~ '\n",
    "for x in df.columns:\n",
    "    if df[x].dtype == 'float64' and x != 'Weekly_Sales':\n",
    "        stmt = stmt + x + ' + '\n",
    "\n",
    "#Excising unnecessary parts.\n",
    "stmt = stmt[:-3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:           Weekly_Sales   R-squared:                       0.007\n",
      "Model:                            OLS   Adj. R-squared:                  0.007\n",
      "Method:                 Least Squares   F-statistic:                     226.1\n",
      "Date:                Sun, 22 Sep 2019   Prob (F-statistic):               0.00\n",
      "Time:                        14:44:44   Log-Likelihood:            -3.2323e+06\n",
      "No. Observations:              282451   AIC:                         6.465e+06\n",
      "Df Residuals:                  282441   BIC:                         6.465e+06\n",
      "Df Model:                           9                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "================================================================================\n",
      "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------\n",
      "Intercept     2.606e+04    494.488     52.711      0.000    2.51e+04     2.7e+04\n",
      "Temperature     23.9436      2.471      9.691      0.000      19.101      28.786\n",
      "Fuel_Price   -1483.2012    102.857    -14.420      0.000   -1684.798   -1281.604\n",
      "MarkDown1        0.1904      0.014     13.386      0.000       0.163       0.218\n",
      "MarkDown2        0.0513      0.009      5.919      0.000       0.034       0.068\n",
      "MarkDown3        0.1500      0.008     19.263      0.000       0.135       0.165\n",
      "MarkDown4       -0.0727      0.021     -3.545      0.000      -0.113      -0.033\n",
      "MarkDown5        0.1940      0.011     17.401      0.000       0.172       0.216\n",
      "CPI            -25.0676      1.203    -20.834      0.000     -27.426     -22.709\n",
      "Unemployment  -388.1754     24.458    -15.871      0.000    -436.113    -340.238\n",
      "==============================================================================\n",
      "Omnibus:                   205761.418   Durbin-Watson:                   2.001\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          5733316.107\n",
      "Skew:                           3.215   Prob(JB):                         0.00\n",
      "Kurtosis:                      24.114   Cond. No.                     9.45e+04\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 9.45e+04. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "#Running the model\n",
    "m = ols(stmt,df).fit()\n",
    "print(m.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks like there are some collinearity problems. I suspect that may be due to the markdown columns being very intercorrelated with each other, so I'm going to put IsMarkDown in instead and see if that might erase that issue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:           Weekly_Sales   R-squared:                       0.004\n",
      "Model:                            OLS   Adj. R-squared:                  0.004\n",
      "Method:                 Least Squares   F-statistic:                     227.1\n",
      "Date:                Sun, 22 Sep 2019   Prob (F-statistic):          9.56e-243\n",
      "Time:                        14:44:45   Log-Likelihood:            -3.2327e+06\n",
      "No. Observations:              282451   AIC:                         6.466e+06\n",
      "Df Residuals:                  282445   BIC:                         6.466e+06\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept           2.526e+04    490.224     51.519      0.000    2.43e+04    2.62e+04\n",
      "IsMarkDown[T.True]  2733.2138    109.033     25.068      0.000    2519.513    2946.915\n",
      "Temperature           21.0640      2.447      8.607      0.000      16.267      25.861\n",
      "Fuel_Price         -1149.6138    102.083    -11.262      0.000   -1349.694    -949.534\n",
      "CPI                  -24.1783      1.205    -20.069      0.000     -26.540     -21.817\n",
      "Unemployment        -397.0143     24.542    -16.177      0.000    -445.116    -348.913\n",
      "==============================================================================\n",
      "Omnibus:                   207215.233   Durbin-Watson:                   2.001\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          5971651.386\n",
      "Skew:                           3.236   Prob(JB):                         0.00\n",
      "Kurtosis:                      24.576   Cond. No.                     2.17e+03\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.17e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "m = ols('Weekly_Sales ~ Temperature + Fuel_Price + CPI + Unemployment + IsMarkDown',df).fit()\n",
    "print(m.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The condition number has decreased, meaning we successfully reduced some of the multicollinearity, albeit not all of it. Nevertheless, we can see the impact of several of our variables. Fuel Price, CPI, and Unemployment all have a negative impact on the weekly revenue, while temperature and Markdowns have a positive value.\n",
    "\n",
    "You know what, since we're looking at the impact of non-numerical variables already let's do some OneHotEncoding and look at the impact of the other non-numerical variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 282451 entries, 0 to 282450\n",
      "Data columns (total 19 columns):\n",
      "Store           282451 non-null int64\n",
      "Dept            282451 non-null int64\n",
      "Date            282451 non-null datetime64[ns]\n",
      "Weekly_Sales    282451 non-null float64\n",
      "IsHoliday       282451 non-null bool\n",
      "Temperature     282451 non-null float64\n",
      "Fuel_Price      282451 non-null float64\n",
      "MarkDown1       282451 non-null float64\n",
      "MarkDown2       282451 non-null float64\n",
      "MarkDown3       282451 non-null float64\n",
      "MarkDown4       282451 non-null float64\n",
      "MarkDown5       282451 non-null float64\n",
      "CPI             282451 non-null float64\n",
      "Unemployment    282451 non-null float64\n",
      "Size            282451 non-null int64\n",
      "IsMarkDown      282451 non-null bool\n",
      "Type_A          282451 non-null uint8\n",
      "Type_B          282451 non-null uint8\n",
      "Type_C          282451 non-null uint8\n",
      "dtypes: bool(2), datetime64[ns](1), float64(10), int64(3), uint8(3)\n",
      "memory usage: 43.7 MB\n"
     ]
    }
   ],
   "source": [
    "#Converting to have the category column onehotencoded\n",
    "df['Date'] = df['Date'].astype('datetime64')\n",
    "df['Type'] = df['Type'].astype('category')\n",
    "df_dummies = pd.get_dummies(df)\n",
    "df_dummies.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#As I am too lazy to put all of the numerical values in by hand I wrote a for loop to take care of that.\n",
    "\n",
    "#Writing statement\n",
    "stmt = 'Weekly_Sales ~ '\n",
    "for x in df_dummies.columns:\n",
    "    if x != 'Weekly_Sales':\n",
    "        stmt = stmt + x + ' + '\n",
    "\n",
    "#Excising unnecessary parts.\n",
    "stmt = stmt[:-3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:           Weekly_Sales   R-squared:                       0.096\n",
      "Model:                            OLS   Adj. R-squared:                  0.096\n",
      "Method:                 Least Squares   F-statistic:                     191.5\n",
      "Date:                Sun, 22 Sep 2019   Prob (F-statistic):               0.00\n",
      "Time:                        15:23:56   Log-Likelihood:            -3.2190e+06\n",
      "No. Observations:              282451   AIC:                         6.438e+06\n",
      "Df Residuals:                  282293   BIC:                         6.440e+06\n",
      "Df Model:                         157                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "============================================================================================================\n",
      "                                               coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------------------------\n",
      "Intercept                                 3265.3154    853.128      3.827      0.000    1593.209    4937.422\n",
      "Date[T.Timestamp('2010-02-12 00:00:00')]  2695.8990    504.990      5.339      0.000    1706.133    3685.665\n",
      "Date[T.Timestamp('2010-02-19 00:00:00')]  -427.3686    687.711     -0.621      0.534   -1775.263     920.526\n",
      "Date[T.Timestamp('2010-02-26 00:00:00')] -1697.0830    689.799     -2.460      0.014   -3049.069    -345.097\n",
      "Date[T.Timestamp('2010-03-05 00:00:00')] -1773.3125    690.728     -2.567      0.010   -3127.121    -419.504\n",
      "Date[T.Timestamp('2010-03-12 00:00:00')] -2092.2413    693.680     -3.016      0.003   -3451.834    -732.648\n",
      "Date[T.Timestamp('2010-03-19 00:00:00')] -2676.9014    691.491     -3.871      0.000   -4032.205   -1321.598\n",
      "Date[T.Timestamp('2010-03-26 00:00:00')] -3515.1085    691.488     -5.083      0.000   -4870.405   -2159.812\n",
      "Date[T.Timestamp('2010-04-02 00:00:00')] -1671.9995    694.272     -2.408      0.016   -3032.754    -311.245\n",
      "Date[T.Timestamp('2010-04-09 00:00:00')] -2731.8603    701.141     -3.896      0.000   -4106.077   -1357.644\n",
      "Date[T.Timestamp('2010-04-16 00:00:00')] -3832.2191    701.556     -5.462      0.000   -5207.249   -2457.189\n",
      "Date[T.Timestamp('2010-04-23 00:00:00')] -3618.3121    695.661     -5.201      0.000   -4981.789   -2254.835\n",
      "Date[T.Timestamp('2010-04-30 00:00:00')] -3672.0534    701.779     -5.232      0.000   -5047.521   -2296.586\n",
      "Date[T.Timestamp('2010-05-07 00:00:00')] -3116.7071    709.838     -4.391      0.000   -4507.971   -1725.444\n",
      "Date[T.Timestamp('2010-05-14 00:00:00')] -3878.1482    704.150     -5.508      0.000   -5258.262   -2498.034\n",
      "Date[T.Timestamp('2010-05-21 00:00:00')] -4123.7186    705.364     -5.846      0.000   -5506.212   -2741.226\n",
      "Date[T.Timestamp('2010-05-28 00:00:00')] -3667.7603    711.986     -5.151      0.000   -5063.234   -2272.287\n",
      "Date[T.Timestamp('2010-06-04 00:00:00')] -2241.4554    713.761     -3.140      0.002   -3640.407    -842.504\n",
      "Date[T.Timestamp('2010-06-11 00:00:00')] -3321.8661    715.730     -4.641      0.000   -4724.678   -1919.055\n",
      "Date[T.Timestamp('2010-06-18 00:00:00')] -3880.6422    714.592     -5.431      0.000   -5281.223   -2480.061\n",
      "Date[T.Timestamp('2010-06-25 00:00:00')] -3980.1843    716.087     -5.558      0.000   -5383.694   -2576.674\n",
      "Date[T.Timestamp('2010-07-02 00:00:00')] -3498.7492    721.225     -4.851      0.000   -4912.330   -2085.168\n",
      "Date[T.Timestamp('2010-07-09 00:00:00')] -3997.9725    723.163     -5.528      0.000   -5415.352   -2580.593\n",
      "Date[T.Timestamp('2010-07-16 00:00:00')] -4853.4109    724.198     -6.702      0.000   -6272.818   -3434.004\n",
      "Date[T.Timestamp('2010-07-23 00:00:00')] -5651.9590    721.988     -7.828      0.000   -7067.035   -4236.883\n",
      "Date[T.Timestamp('2010-07-30 00:00:00')] -5300.3358    721.403     -7.347      0.000   -6714.266   -3886.405\n",
      "Date[T.Timestamp('2010-08-06 00:00:00')] -3944.1753    721.507     -5.467      0.000   -5358.308   -2530.042\n",
      "Date[T.Timestamp('2010-08-13 00:00:00')] -4358.0150    722.243     -6.034      0.000   -5773.590   -2942.440\n",
      "Date[T.Timestamp('2010-08-20 00:00:00')] -4272.7742    724.472     -5.898      0.000   -5692.720   -2852.829\n",
      "Date[T.Timestamp('2010-08-27 00:00:00')] -4752.5473    720.341     -6.598      0.000   -6164.397   -3340.698\n",
      "Date[T.Timestamp('2010-09-03 00:00:00')] -3933.2022    713.937     -5.509      0.000   -5332.499   -2533.906\n",
      "Date[T.Timestamp('2010-09-10 00:00:00')] -1681.4382    517.353     -3.250      0.001   -2695.435    -667.441\n",
      "Date[T.Timestamp('2010-09-17 00:00:00')] -4660.0107    709.877     -6.565      0.000   -6051.349   -3268.672\n",
      "Date[T.Timestamp('2010-09-24 00:00:00')] -5594.9328    704.520     -7.941      0.000   -6975.773   -4214.092\n",
      "Date[T.Timestamp('2010-10-01 00:00:00')] -4913.0513    711.469     -6.906      0.000   -6307.511   -3518.591\n",
      "Date[T.Timestamp('2010-10-08 00:00:00')] -3982.6201    697.666     -5.708      0.000   -5350.025   -2615.215\n",
      "Date[T.Timestamp('2010-10-15 00:00:00')] -4129.9743    701.109     -5.891      0.000   -5504.128   -2755.820\n",
      "Date[T.Timestamp('2010-10-22 00:00:00')] -3932.3000    699.157     -5.624      0.000   -5302.628   -2561.972\n",
      "Date[T.Timestamp('2010-10-29 00:00:00')] -4067.4417    700.288     -5.808      0.000   -5439.987   -2694.896\n",
      "Date[T.Timestamp('2010-11-05 00:00:00')] -2613.7164    691.749     -3.778      0.000   -3969.526   -1257.907\n",
      "Date[T.Timestamp('2010-11-12 00:00:00')] -1868.6408    692.714     -2.698      0.007   -3226.341    -510.941\n",
      "Date[T.Timestamp('2010-11-19 00:00:00')] -2397.6630    698.045     -3.435      0.001   -3765.811   -1029.515\n",
      "Date[T.Timestamp('2010-11-26 00:00:00')]  6356.0769    487.532     13.037      0.000    5400.527    7311.627\n",
      "Date[T.Timestamp('2010-12-03 00:00:00')]   102.8208    691.558      0.149      0.882   -1252.613    1458.255\n",
      "Date[T.Timestamp('2010-12-10 00:00:00')]  1271.6806    697.606      1.823      0.068     -95.608    2638.969\n",
      "Date[T.Timestamp('2010-12-17 00:00:00')]  3560.5958    692.225      5.144      0.000    2203.855    4917.337\n",
      "Date[T.Timestamp('2010-12-24 00:00:00')]  9407.5771    696.166     13.513      0.000    8043.110    1.08e+04\n",
      "Date[T.Timestamp('2010-12-31 00:00:00')]  -488.0701    480.042     -1.017      0.309   -1428.940     452.800\n",
      "Date[T.Timestamp('2011-01-07 00:00:00')] -3071.9216    700.630     -4.385      0.000   -4445.136   -1698.707\n",
      "Date[T.Timestamp('2011-01-14 00:00:00')] -3216.6974    701.914     -4.583      0.000   -4592.430   -1840.965\n",
      "Date[T.Timestamp('2011-01-21 00:00:00')] -4269.3296    705.705     -6.050      0.000   -5652.492   -2886.167\n",
      "Date[T.Timestamp('2011-01-28 00:00:00')] -3874.0791    706.979     -5.480      0.000   -5259.739   -2488.419\n",
      "Date[T.Timestamp('2011-02-04 00:00:00')] -1506.7690    702.307     -2.145      0.032   -2883.272    -130.266\n",
      "Date[T.Timestamp('2011-02-11 00:00:00')]  1812.7615    484.989      3.738      0.000     862.196    2763.327\n",
      "Date[T.Timestamp('2011-02-18 00:00:00')] -1587.5950    704.996     -2.252      0.024   -2969.367    -205.823\n",
      "Date[T.Timestamp('2011-02-25 00:00:00')] -3223.4240    708.923     -4.547      0.000   -4612.894   -1833.954\n",
      "Date[T.Timestamp('2011-03-04 00:00:00')] -2708.5256    724.740     -3.737      0.000   -4128.995   -1288.056\n",
      "Date[T.Timestamp('2011-03-11 00:00:00')] -3918.5186    741.467     -5.285      0.000   -5371.773   -2465.264\n",
      "Date[T.Timestamp('2011-03-18 00:00:00')] -3972.4652    747.906     -5.311      0.000   -5438.340   -2506.591\n",
      "Date[T.Timestamp('2011-03-25 00:00:00')] -5246.7572    746.741     -7.026      0.000   -6710.349   -3783.165\n",
      "Date[T.Timestamp('2011-04-01 00:00:00')] -5050.6879    753.462     -6.703      0.000   -6527.453   -3573.923\n",
      "Date[T.Timestamp('2011-04-08 00:00:00')] -4504.0189    769.532     -5.853      0.000   -6012.281   -2995.757\n",
      "Date[T.Timestamp('2011-04-15 00:00:00')] -5056.7004    781.375     -6.472      0.000   -6588.174   -3525.227\n",
      "Date[T.Timestamp('2011-04-22 00:00:00')] -3968.0358    796.519     -4.982      0.000   -5529.190   -2406.881\n",
      "Date[T.Timestamp('2011-04-29 00:00:00')] -6130.2537    801.556     -7.648      0.000   -7701.281   -4559.226\n",
      "Date[T.Timestamp('2011-05-06 00:00:00')] -4739.1398    812.441     -5.833      0.000   -6331.501   -3146.779\n",
      "Date[T.Timestamp('2011-05-13 00:00:00')] -5497.0615    818.830     -6.713      0.000   -7101.945   -3892.178\n",
      "Date[T.Timestamp('2011-05-20 00:00:00')] -5038.4009    822.662     -6.125      0.000   -6650.795   -3426.006\n",
      "Date[T.Timestamp('2011-05-27 00:00:00')] -5836.7229    811.499     -7.193      0.000   -7427.239   -4246.207\n",
      "Date[T.Timestamp('2011-06-03 00:00:00')] -4501.8935    804.732     -5.594      0.000   -6079.145   -2924.642\n",
      "Date[T.Timestamp('2011-06-10 00:00:00')] -5249.6110    798.634     -6.573      0.000   -6814.911   -3684.311\n",
      "Date[T.Timestamp('2011-06-17 00:00:00')] -5332.4409    788.483     -6.763      0.000   -6877.846   -3787.036\n",
      "Date[T.Timestamp('2011-06-24 00:00:00')] -6031.5322    788.405     -7.650      0.000   -7576.784   -4486.280\n",
      "Date[T.Timestamp('2011-07-01 00:00:00')] -5838.9382    785.837     -7.430      0.000   -7379.157   -4298.719\n",
      "Date[T.Timestamp('2011-07-08 00:00:00')] -5312.6181    780.302     -6.808      0.000   -6841.989   -3783.247\n",
      "Date[T.Timestamp('2011-07-15 00:00:00')] -6349.7150    785.526     -8.083      0.000   -7889.325   -4810.105\n",
      "Date[T.Timestamp('2011-07-22 00:00:00')] -6127.2934    792.209     -7.734      0.000   -7680.000   -4574.586\n",
      "Date[T.Timestamp('2011-07-29 00:00:00')] -6583.3795    798.353     -8.246      0.000   -8148.130   -5018.629\n",
      "Date[T.Timestamp('2011-08-05 00:00:00')] -5327.3773    798.657     -6.670      0.000   -6892.723   -3762.032\n",
      "Date[T.Timestamp('2011-08-12 00:00:00')] -6150.7437    794.761     -7.739      0.000   -7708.454   -4593.034\n",
      "Date[T.Timestamp('2011-08-19 00:00:00')] -5775.0453    779.497     -7.409      0.000   -7302.838   -4247.252\n",
      "Date[T.Timestamp('2011-08-26 00:00:00')] -5687.6407    780.943     -7.283      0.000   -7218.268   -4157.013\n",
      "Date[T.Timestamp('2011-09-02 00:00:00')] -6174.4008    779.691     -7.919      0.000   -7702.573   -4646.228\n",
      "Date[T.Timestamp('2011-09-09 00:00:00')] -2361.7127    512.266     -4.610      0.000   -3365.741   -1357.685\n",
      "Date[T.Timestamp('2011-09-16 00:00:00')] -6237.9653    776.192     -8.037      0.000   -7759.280   -4716.651\n",
      "Date[T.Timestamp('2011-09-23 00:00:00')] -6679.7224    769.892     -8.676      0.000   -8188.690   -5170.755\n",
      "Date[T.Timestamp('2011-09-30 00:00:00')] -6449.7236    766.637     -8.413      0.000   -7952.310   -4947.137\n",
      "Date[T.Timestamp('2011-10-07 00:00:00')] -4396.5191    749.066     -5.869      0.000   -5864.668   -2928.370\n",
      "Date[T.Timestamp('2011-10-14 00:00:00')] -5101.3365    748.395     -6.816      0.000   -6568.171   -3634.503\n",
      "Date[T.Timestamp('2011-10-21 00:00:00')] -5001.0253    752.277     -6.648      0.000   -6475.467   -3526.583\n",
      "Date[T.Timestamp('2011-10-28 00:00:00')] -4860.5226    751.066     -6.472      0.000   -6332.590   -3388.455\n",
      "Date[T.Timestamp('2011-11-04 00:00:00')] -2809.6475    743.566     -3.779      0.000   -4267.017   -1352.279\n",
      "Date[T.Timestamp('2011-11-11 00:00:00')] -4292.6785    778.386     -5.515      0.000   -5818.294   -2767.063\n",
      "Date[T.Timestamp('2011-11-18 00:00:00')] -4922.0884    770.053     -6.392      0.000   -6431.371   -3412.806\n",
      "Date[T.Timestamp('2011-11-25 00:00:00')] -3084.3894    889.758     -3.467      0.001   -4828.290   -1340.489\n",
      "Date[T.Timestamp('2011-12-02 00:00:00')] -5200.6701    775.048     -6.710      0.000   -6719.743   -3681.598\n",
      "Date[T.Timestamp('2011-12-09 00:00:00')] -1326.0723    741.608     -1.788      0.074   -2779.604     127.459\n",
      "Date[T.Timestamp('2011-12-16 00:00:00')]  1250.4962    733.118      1.706      0.088    -186.395    2687.388\n",
      "Date[T.Timestamp('2011-12-23 00:00:00')]  6677.3169    731.922      9.123      0.000    5242.771    8111.863\n",
      "Date[T.Timestamp('2011-12-30 00:00:00')] -1969.1593    730.524     -2.696      0.007   -3400.967    -537.352\n",
      "Date[T.Timestamp('2012-01-06 00:00:00')] -4692.6693    806.539     -5.818      0.000   -6273.464   -3111.875\n",
      "Date[T.Timestamp('2012-01-13 00:00:00')] -5132.1147    756.052     -6.788      0.000   -6613.955   -3650.274\n",
      "Date[T.Timestamp('2012-01-20 00:00:00')] -5051.7740    745.165     -6.779      0.000   -6512.276   -3591.272\n",
      "Date[T.Timestamp('2012-01-27 00:00:00')] -5750.9533    739.072     -7.781      0.000   -7199.515   -4302.392\n",
      "Date[T.Timestamp('2012-02-03 00:00:00')] -7333.4861    934.762     -7.845      0.000   -9165.594   -5501.378\n",
      "Date[T.Timestamp('2012-02-10 00:00:00')]  -738.3710    513.907     -1.437      0.151   -1745.614     268.872\n",
      "Date[T.Timestamp('2012-02-17 00:00:00')] -3893.5866    779.170     -4.997      0.000   -5420.739   -2366.435\n",
      "Date[T.Timestamp('2012-02-24 00:00:00')] -4668.1946    780.644     -5.980      0.000   -6198.235   -3138.154\n",
      "Date[T.Timestamp('2012-03-02 00:00:00')] -5335.7983    806.799     -6.614      0.000   -6917.101   -3754.495\n",
      "Date[T.Timestamp('2012-03-09 00:00:00')] -4667.0447    799.613     -5.837      0.000   -6234.264   -3099.826\n",
      "Date[T.Timestamp('2012-03-16 00:00:00')] -4741.5252    812.717     -5.834      0.000   -6334.428   -3148.623\n",
      "Date[T.Timestamp('2012-03-23 00:00:00')] -5511.2407    819.294     -6.727      0.000   -7117.035   -3905.446\n",
      "Date[T.Timestamp('2012-03-30 00:00:00')] -6138.3610    827.724     -7.416      0.000   -7760.677   -4516.045\n",
      "Date[T.Timestamp('2012-04-06 00:00:00')] -3607.1087    822.990     -4.383      0.000   -5220.146   -1994.071\n",
      "Date[T.Timestamp('2012-04-13 00:00:00')] -5635.7138    842.939     -6.686      0.000   -7287.852   -3983.576\n",
      "Date[T.Timestamp('2012-04-20 00:00:00')] -6188.7580    846.046     -7.315      0.000   -7846.984   -4530.532\n",
      "Date[T.Timestamp('2012-04-27 00:00:00')] -6519.0993    828.791     -7.866      0.000   -8143.507   -4894.692\n",
      "Date[T.Timestamp('2012-05-04 00:00:00')] -6131.4704    821.639     -7.462      0.000   -7741.860   -4521.081\n",
      "Date[T.Timestamp('2012-05-11 00:00:00')] -5878.1351    818.954     -7.178      0.000   -7483.262   -4273.008\n",
      "Date[T.Timestamp('2012-05-18 00:00:00')] -6374.5583    806.353     -7.905      0.000   -7954.988   -4794.129\n",
      "Date[T.Timestamp('2012-05-25 00:00:00')] -6048.5400    807.524     -7.490      0.000   -7631.265   -4465.815\n",
      "Date[T.Timestamp('2012-06-01 00:00:00')] -6049.6010    811.496     -7.455      0.000   -7640.110   -4459.092\n",
      "Date[T.Timestamp('2012-06-08 00:00:00')] -5161.1128    803.636     -6.422      0.000   -6736.216   -3586.009\n",
      "Date[T.Timestamp('2012-06-15 00:00:00')] -5599.3739    800.982     -6.991      0.000   -7169.277   -4029.471\n",
      "Date[T.Timestamp('2012-06-22 00:00:00')] -6371.3007    797.103     -7.993      0.000   -7933.601   -4809.001\n",
      "Date[T.Timestamp('2012-06-29 00:00:00')] -7082.9778    776.906     -9.117      0.000   -8605.693   -5560.263\n",
      "Date[T.Timestamp('2012-07-06 00:00:00')] -5779.2788    793.092     -7.287      0.000   -7333.718   -4224.840\n",
      "Date[T.Timestamp('2012-07-13 00:00:00')] -6891.0825    790.305     -8.720      0.000   -8440.058   -5342.107\n",
      "Date[T.Timestamp('2012-07-20 00:00:00')] -6295.7577    792.969     -7.939      0.000   -7849.955   -4741.560\n",
      "Date[T.Timestamp('2012-07-27 00:00:00')] -7803.7461    803.931     -9.707      0.000   -9379.428   -6228.064\n",
      "Date[T.Timestamp('2012-08-03 00:00:00')] -7763.8852    829.522     -9.359      0.000   -9389.725   -6138.045\n",
      "Date[T.Timestamp('2012-08-10 00:00:00')] -7104.4269    813.960     -8.728      0.000   -8699.767   -5509.087\n",
      "Date[T.Timestamp('2012-08-17 00:00:00')] -6135.1154    816.038     -7.518      0.000   -7734.527   -4535.704\n",
      "Date[T.Timestamp('2012-08-24 00:00:00')] -6192.9670    811.776     -7.629      0.000   -7784.026   -4601.908\n",
      "Date[T.Timestamp('2012-08-31 00:00:00')] -6776.2897    837.204     -8.094      0.000   -8417.187   -5135.393\n",
      "Date[T.Timestamp('2012-09-07 00:00:00')] -3349.6743    561.811     -5.962      0.000   -4450.808   -2248.541\n",
      "Date[T.Timestamp('2012-09-14 00:00:00')] -7509.1559    815.410     -9.209      0.000   -9107.338   -5910.974\n",
      "Date[T.Timestamp('2012-09-21 00:00:00')] -7659.5911    835.883     -9.163      0.000   -9297.898   -6021.284\n",
      "Date[T.Timestamp('2012-09-28 00:00:00')] -7309.3622    822.479     -8.887      0.000   -8921.398   -5697.326\n",
      "Date[T.Timestamp('2012-10-05 00:00:00')] -6493.1219    807.569     -8.040      0.000   -8075.935   -4910.309\n",
      "Date[T.Timestamp('2012-10-12 00:00:00')] -6187.4526    810.742     -7.632      0.000   -7776.485   -4598.420\n",
      "Date[T.Timestamp('2012-10-19 00:00:00')] -6012.8657    810.014     -7.423      0.000   -7600.472   -4425.260\n",
      "Date[T.Timestamp('2012-10-26 00:00:00')] -5774.6698    811.322     -7.118      0.000   -7364.838   -4184.502\n",
      "IsHoliday[T.True]                        -2808.0777    507.317     -5.535      0.000   -3802.405   -1813.750\n",
      "IsMarkDown[T.True]                        -346.3216    204.103     -1.697      0.090    -746.357      53.714\n",
      "Store                                     -126.8541      3.846    -32.985      0.000    -134.392    -119.317\n",
      "Dept                                       109.5869      1.330     82.377      0.000     106.979     112.194\n",
      "Temperature                                 78.9008      4.685     16.840      0.000      69.718      88.084\n",
      "Fuel_Price                                1546.6187    338.500      4.569      0.000     883.169    2210.069\n",
      "MarkDown1                                    0.0773      0.017      4.432      0.000       0.043       0.111\n",
      "MarkDown2                                    0.0463      0.015      3.145      0.002       0.017       0.075\n",
      "MarkDown3                                    0.1454      0.015      9.798      0.000       0.116       0.174\n",
      "MarkDown4                                    0.0159      0.025      0.640      0.522      -0.033       0.065\n",
      "MarkDown5                                    0.0975      0.013      7.571      0.000       0.072       0.123\n",
      "CPI                                        -28.4767      1.442    -19.752      0.000     -31.302     -25.651\n",
      "Unemployment                              -448.7704     26.808    -16.740      0.000    -501.313    -396.228\n",
      "Size                                         0.0969      0.001     79.718      0.000       0.095       0.099\n",
      "Type_A                                    -678.4235    303.857     -2.233      0.026   -1273.975     -82.872\n",
      "Type_B                                    -777.4418    294.945     -2.636      0.008   -1355.527    -199.357\n",
      "Type_C                                    4721.1806    312.061     15.129      0.000    4109.550    5332.811\n",
      "==============================================================================\n",
      "Omnibus:                   194907.927   Durbin-Watson:                   2.002\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          5662229.518\n",
      "Skew:                           2.944   Prob(JB):                         0.00\n",
      "Kurtosis:                      24.129   Cond. No.                     1.28e+20\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The smallest eigenvalue is 3.86e-25. This might indicate that there are\n",
      "strong multicollinearity problems or that the design matrix is singular.\n"
     ]
    }
   ],
   "source": [
    "m = ols(stmt,df_dummies).fit()\n",
    "print(m.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I know this is a bit messy, and there are a lot of collinearity issues going on, but it gives us a preliminary picture of what's going on. Some dates are actually significantly correlated with higher or lower weekly sales, and it appears that the coefficient for some of the predictors changed with the increase in number of predictors modeled. \n",
    "\n",
    "When I'm actually creating my models, I might eliminate some variables to reduce collinearities. I might perform a few transformations, too, to increase the fit."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
